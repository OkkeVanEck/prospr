name: CI-CD

on: push

jobs:
  matrix_prep:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - uses: nelonoel/branch-name@v1.0.1

      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@0.0.1
        with:
          inputFile: '.github/workflows/matrix_includes.json'
          filter: '[?starts_with(`${{ env.BRANCH_NAME }}`, runOn)] || [?runOn == `always`]'

  setup_venv:
    name: Setup cached virtual environment
    strategy:
      matrix:
        python-version: [3.6]
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cache_path: ~/.cache/pip
          - os: macos-latest
            cache_path: ~/Library/Caches/pip
          - os: windows-latest
            cache_path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create cache of environment
        uses: actions/cache@v2
        id: venv-cache
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
           ${{ runner.os }}-venv-

      - name: Install dependencies
#        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .
          cd /
          python -m pip install flake8

  syntax_check:
    name: Check for syntax errors
    needs: setup_venv
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cache_path: ~/.cache/pip
          - os: macos-latest
            cache_path: ~/Library/Caches/pip
          - os: windows-latest
            cache_path: ~\AppData\Local\pip\Cache
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cache of environment
        uses: actions/cache@v2
        id: venv-cache
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  pytest:
    name: Pytest
    needs: syntax_check
    strategy:
      matrix:
        python-version: [3.6]
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cache_path: ~/.cache/pip
          - os: macos-latest
            cache_path: ~/Library/Caches/pip
          - os: windows-latest
            cache_path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cache of environment
        uses: actions/cache@v2
        id: venv-cache
        with:
          path: ${{ matrix.cache_path }}
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -e .

      - name: Test with pytest
        run: pytest


  build_wheels:
    name: Build wheels
    needs: [pytest, matrix_prep]
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Build wheels
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_SKIP: ${{ matrix.cibw_skip }}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: pytest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: python -m pip install twine build

      - name: Build sdist
        run: python -m build -s

      - name: Check metadata
        run: twine check dist/*

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  deploy:
    if: github.ref == 'refs/heads/master'
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
