.. Quickstart for using Prospr for the first time.

Quickstart
==========
One can choose to use the Python package, or only the C++ core. The C++ core is
handy for maximizing the execution speed of your experiments, while the Python
package may lower development time and offers more functionality.

Example usage is given using the Python package and only shows basic usage.
Please refer to the :doc:`manpages` to see the equivalent usage in C++ and all
functionality. The :doc:`heterogeneous_setup` page contains an example of how to
setup a heterogeneous approach.

Please take a look at the :doc:`installation` page first to see how Prospr can
be installed.


Creating Proteins
-----------------
After installing Prospr, one can simply create a Protein object as
follows:

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPHPPH")
    p_3d = Protein("HPPHPPH", dim=3)
    p_4d = Protein("HPPHPPH", dim=4)
    p_5d = Protein("HPPHPPH", dim=5)
    ...

Protein attributes
------------------
A Protein object keeps track of multiple properties while it is being folded.
These properties can be checked as attributes of the Protein object. Below all
properties are listed, but please refer to the :doc:`manpages` to see what they
all keep track of exactly.

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPH")

    p_2d.sequence
    >>> "HPPH"

    p_2d.h_idxs
    >>> [0, 3]

    p_2d.cur_len
    >>> 0

    p_2d.dim
    >>> 2

    p_2d.last_move
    >>> 0

    p_2d.last_pos
    >>> [0, 0]

    p_2d.score
    >>> 0

    p_2d.changes
    >>> 0

Placing amino acids
-------------------
A Protein object is generated with the first amino acid fixed at the origin.
One can place the next amino acid via the *.place_amino(move)* function.
This function takes a move as an argument, which is a number representing the
axis to move over. As an example, 1 can be seen as the x-axis, 2 as the y-axis,
etc. Negative numbers represent movement in negative direction.

.. code-block:: python

    p_2d.place_amino(1)
    p_2d.place_amino(2)
    p_2d.place_amino(-1)

Removing amino acids
--------------------
Amino acids can be removed via the *.remove_amino()* function.

.. code-block:: python

    p_2d.remove_amino() # Leaving the moves [1, 2]
    p_2d.remove_amino() # Leaving the moves [1]

Validating moves
----------------
Before trying to place an amino acid, it it is recommended to check whether the
move is valid. This can be done via the *.is_valid(move)* function, which takes
the requested move as an argument.

.. code-block:: python

    from prospr import Protein

    p_2d.is_valid(1)
    >>> True

    p_2d.place_amino(1)
    p_2d.is_valid(-1)
    >>> False

Checking stability
------------------
The stability of a (partially) folded Protein is tracked in the *.score*
attribute. This attribute changes dynamically when placing and removing amino
acids.

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPH")
    p_2d.place_amino(1)
    p_2d.score
    >>> 0

    p_2d.place_amino(2)
    p_2d.place_amino(-1)
    p_2d.score
    >>> -1

Checking number of changes
--------------------------
In order to compare the efficiency of algorithms, a Protein object also keeps
track of the number of moves performed thus far. This does not include the
removal of amino acids. The current number of performed moves is tracked in the
*.changes* attribute.

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPH")
    p_2d.place_amino(1)
    p_2d.changes
    >>> 1

    p_2d.place_amino(2)
    p_2d.remove_amino()
    p_2d.place_amino(-2)
    p_2d.place_amino(-1)
    p_2d.changes
    >>> 4

Hashing folds
-------------
The current fold of a Protein can be generated via the *.hash_fold()* function.
The function will return the sequence of moves for the current conformation.

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPH")
    p_2d.place_amino(1)
    p_2d.hash_fold()
    >>> [1]

    p_2d.place_amino(2)
    p_2d.place_amino(-1)
    p_2d.hash_fold()
    >>> [1, 2, -1]

Setting folds
-------------
At any time, a Protein's conformation can be set to a given set of moves. This
is done via the *.set_hash(fold_hash)* function, which takes a sequence of moves
as an argument, just like the ones generated by the *.hash_fold()* function.

.. code-block:: python

    from prospr import Protein

    p_2d = Protein("HPPH")
    p_2d.place_amino(2)
    p_2d.place_amino(-1)
    p_2d.hash_fold()
    >>> [2, -1]

    p_2d.set_hash([1, 2, -1])
    p_2d.hash_fold()
    >>> [1, 2, -1]
